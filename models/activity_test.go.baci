package models

import (
	"fmt"
	"group_buying/constant"
	"testing"
	"time"

	_ "github.com/go-sql-driver/mysql"

	"github.com/astaxie/beego/orm"
)

func reset() {
	orm.RegisterDriver("mysql", orm.DRMySQL)
	orm.RegisterDataBase("default", "mysql", "root:Start123@/dev?charset=utf8&loc=Asia%2FShanghai")
	orm.DefaultTimeLoc = time.UTC
	// Resync Database
	// 数据库别名
	name := "default"
	// drop table 后再建表
	force := true
	// 打印执行过程
	verbose := false
	// 遇到错误立即返回
	err := orm.RunSyncdb(name, force, verbose)
	if err != nil {
		fmt.Println(err)
	}
	// orm.Debug = true
}
func init() {
	reset()
}
func Test_AddActivityTicketModels(t *testing.T) {
	a := Activity{}
	a.LimitCount = 100
	a.ExistCount = 101
	// Formate string to Time
	startDate, _ := time.ParseInLocation(constant.Format, "2017-01-01", time.UTC)
	endDate, _ := time.ParseInLocation(constant.Format, "2017-12-10", time.UTC)
	a.StartDate = startDate
	a.EndDate = endDate
	o := orm.NewOrm()
	o.Insert(&a)
	for i := 0; i < 5; i++ {
		st := fmt.Sprintf("user%d", i)
		temp := TicketModel{TicketName: st}
		o.Insert(&temp)
	}
	result := GetActivity(1)
	t.Log(result)
	result = GetAllTicketModels()
	t.Log("All Ticketmodel: ", result)
	// INIT done

	for i := 1; i < 5; i++ {
		temp := map[string]interface{}{"id": i, "is_amust": true, "use_detail": fmt.Sprintf("blablalba%d", i), "startDate": "2017-11-11"}
		test := AddOrUpdateActivityTicketModels(1, i, temp)
		t.Log("Test :", test)
	}

}

// func Test_GetActivity(t *testing.T) {
// 	// a := Activity{}
// 	// ui := ActivityUi{SuccessButton: "test"}
// 	// a.LimitCount = 100
// 	// a.ExistCount = 101
// 	// // Formate string to Time
// 	// startDate, _ := time.ParseInLocation(constant.Format, "2017-01-01T00:00:00", time.UTC)
// 	// endDate, _ := time.ParseInLocation(constant.Format, "2017-12-10T05:30:00", time.UTC)
// 	// a.StartDate = startDate
// 	// t.Log("StartDate:", startDate)
// 	// a.EndDate = endDate
// 	// a.ActivityUi = &ui
// 	// o := orm.NewOrm()
// 	// o.Insert(&ui)
// 	// o.Insert(&a)
// 	result := GetActivity(100)
// 	t.Log("Is End:", result["isEnd"])
// 	t.Log("Result:", result["activityUI"])

// }
// func Test_GetActivityDetail(t *testing.T) {
// 	o := orm.NewOrm()
// 	activity := Activity{Name: "TestDetail"}
// 	o.Insert(&activity)
// 	groups := []*Group{}
// 	ticketModels := []*TicketModel{}
// 	for a := 0; a < 10; a++ {
// 		tempGroup := Group{Activity: &activity, Size: a}
// 		tempTicketModel := TicketModel{Activitys: []*Activity{&activity}, Description: strconv.Itoa(a)}
// 		groups = append(groups, &tempGroup)
// 		ticketModels = append(ticketModels, &tempTicketModel)
// 	}
// 	o.InsertMulti(1, groups)
// 	user := User{Group: groups[0]}
// 	o.Insert(&user)
// 	activity.TicketModels = ticketModels
// 	activity.Groups = groups
// 	o.InsertMulti(1, ticketModels)
// 	o.QueryM2M(&activity, "TicketModels").Add(ticketModels)
// 	o.Update(&activity)
// 	result := GetActivityDetail(1)
// 	result2 := GetActivityDetail(2)
// 	t.Log("ActivityDetail:", result)
// 	t.Log("ActivityDetail2:", result2)
// }

// func Test_GetAllActivities(t *testing.T) {
// 	result := GetAllActivities()
// 	t.Log("All Activities:", result)
// 	t.Log("Activity 2:", result["activities"].([]map[string]interface{})[0]["isEnd"])
// }
